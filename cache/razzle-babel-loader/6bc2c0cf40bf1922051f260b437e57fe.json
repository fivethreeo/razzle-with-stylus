{"ast":null,"code":"var _jsxFileName = \"/sandbox/src/real.server.js\";\nvar __jsx = React.createElement;\nimport App from \"./App\";\nimport React from \"react\";\nimport express from \"express\";\nimport { renderToString } from \"react-dom/server\";\nimport ssrPrepass from \"react-ssr-prepass\";\nimport { StaticRouter } from \"react-router-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { dehydrate, Hydrate, QueryClient, QueryClientProvider } from \"react-query\";\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\n\nconst cssLinksFromAssets = (public_path, assets, entrypoint) => {\n  return assets[entrypoint] ? assets[entrypoint].css ? assets[entrypoint].css.map(asset => `<link rel=\"stylesheet\" href=\"${public_path}${asset}\">`).join(\"\") : \"\" : \"\";\n};\n\nconst jsScriptTagsFromAssets = (public_path, assets, entrypoint, extra = \"\") => {\n  return assets[entrypoint] ? assets[entrypoint].js ? assets[entrypoint].js.map(asset => `<script src=\"${public_path}${asset}\"${extra}></script>`).join(\"\") : \"\" : \"\";\n};\n\nconst server = express();\nexport const renderApp = async (req, res) => {\n  const public_path = `https://${CODESANDBOX_HOST}/`;\n  const context = {};\n  const helmetContext = {};\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        suspense: true\n      }\n    }\n  });\n  let dehydratedState = dehydrate(queryClient);\n\n  const PrepassedApp = __jsx(QueryClientProvider, {\n    client: queryClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(Hydrate, {\n    state: dehydratedState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(StaticRouter, {\n    context: context,\n    location: req.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(HelmetProvider, {\n    context: helmetContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, __jsx(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  })))));\n\n  await ssrPrepass(PrepassedApp);\n  dehydratedState = dehydrate(queryClient);\n  const markup = renderToString(PrepassedApp);\n  const {\n    helmet\n  } = helmetContext;\n  const html = `<!doctype html>\n  <html lang=\"\">\n  <head>\n      ${helmet.title.toString()}\n      ${helmet.priority.toString()}\n      ${helmet.meta.toString()}\n      ${helmet.link.toString()}\n      ${helmet.script.toString()}\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      ${cssLinksFromAssets(public_path, assets, \"client\")}\n      <script type=\"text/javascript\">\n      window.PUBLIC_PATH = '${public_path}';\n    </script>\n  </head>\n  <body>\n    <div id=\"root\">${markup}</div>\n      ${jsScriptTagsFromAssets(public_path, assets, \"client\", \"defer\", \"crossorigin\")}\n      <script>\n        window.__REACT_QUERY_STATE__ = ${JSON.stringify(dehydratedState)};\n    </script>\n  </body>\n</html>`;\n  return {\n    context,\n    html\n  };\n};\nserver.disable(\"x-powered-by\").use(express.static(process.env.RAZZLE_PUBLIC_DIR)).get(\"/*\", async (req, res) => {\n  const {\n    html,\n    context\n  } = await renderApp(req, res);\n\n  if (context.url) {\n    // Somewhere a `<Redirect>` was rendered\n    return res.redirect(301, context.url);\n  }\n\n  res.send(html);\n});\nexport default server;","map":{"version":3,"sources":["/sandbox/src/real.server.js"],"names":["App","React","express","renderToString","ssrPrepass","StaticRouter","HelmetProvider","dehydrate","Hydrate","QueryClient","QueryClientProvider","assets","require","process","env","RAZZLE_ASSETS_MANIFEST","cssLinksFromAssets","public_path","entrypoint","css","map","asset","join","jsScriptTagsFromAssets","extra","js","server","renderApp","req","res","CODESANDBOX_HOST","context","helmetContext","queryClient","defaultOptions","queries","suspense","dehydratedState","PrepassedApp","url","markup","helmet","html","title","toString","priority","meta","link","script","JSON","stringify","disable","use","static","RAZZLE_PUBLIC_DIR","get","redirect","send"],"mappings":"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","sourcesContent":["import App from \"./App\";\nimport React from \"react\";\nimport express from \"express\";\nimport { renderToString } from \"react-dom/server\";\nimport ssrPrepass from \"react-ssr-prepass\";\nimport { StaticRouter } from \"react-router-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport {\n  dehydrate,\n  Hydrate,\n  QueryClient,\n  QueryClientProvider\n} from \"react-query\";\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\n\nconst cssLinksFromAssets = (public_path, assets, entrypoint) => {\n  return assets[entrypoint]\n    ? assets[entrypoint].css\n      ? assets[entrypoint].css\n          .map(\n            (asset) => `<link rel=\"stylesheet\" href=\"${public_path}${asset}\">`\n          )\n          .join(\"\")\n      : \"\"\n    : \"\";\n};\n\nconst jsScriptTagsFromAssets = (\n  public_path,\n  assets,\n  entrypoint,\n  extra = \"\"\n) => {\n  return assets[entrypoint]\n    ? assets[entrypoint].js\n      ? assets[entrypoint].js\n          .map(\n            (asset) => `<script src=\"${public_path}${asset}\"${extra}></script>`\n          )\n          .join(\"\")\n      : \"\"\n    : \"\";\n};\n\nconst server = express();\n\nexport const renderApp = async (req, res) => {\n  const public_path = `https://${CODESANDBOX_HOST}/`;\n\n  const context = {};\n  const helmetContext = {};\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        suspense: true\n      }\n    }\n  });\n  let dehydratedState = dehydrate(queryClient);\n\n  const PrepassedApp = (\n    <QueryClientProvider client={queryClient}>\n      <Hydrate state={dehydratedState}>\n        <StaticRouter context={context} location={req.url}>\n          <HelmetProvider context={helmetContext}>\n            <App />\n          </HelmetProvider>\n        </StaticRouter>\n      </Hydrate>\n    </QueryClientProvider>\n  );\n\n  await ssrPrepass(PrepassedApp);\n\n  dehydratedState = dehydrate(queryClient);\n\n  const markup = renderToString(PrepassedApp);\n  const { helmet } = helmetContext;\n\n  const html = `<!doctype html>\n  <html lang=\"\">\n  <head>\n      ${helmet.title.toString()}\n      ${helmet.priority.toString()}\n      ${helmet.meta.toString()}\n      ${helmet.link.toString()}\n      ${helmet.script.toString()}\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      ${cssLinksFromAssets(public_path, assets, \"client\")}\n      <script type=\"text/javascript\">\n      window.PUBLIC_PATH = '${public_path}';\n    </script>\n  </head>\n  <body>\n    <div id=\"root\">${markup}</div>\n      ${jsScriptTagsFromAssets(\n        public_path,\n        assets,\n        \"client\",\n        \"defer\",\n        \"crossorigin\"\n      )}\n      <script>\n        window.__REACT_QUERY_STATE__ = ${JSON.stringify(dehydratedState)};\n    </script>\n  </body>\n</html>`;\n  return { context, html };\n};\n\nserver\n  .disable(\"x-powered-by\")\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get(\"/*\", async (req, res) => {\n    const { html, context } = await renderApp(req, res);\n\n    if (context.url) {\n      // Somewhere a `<Redirect>` was rendered\n      return res.redirect(301, context.url);\n    }\n\n    res.send(html);\n  });\n\nexport default server;\n"]},"metadata":{},"sourceType":"module"}